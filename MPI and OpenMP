#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <omp.h>
#include <mpi.h>

#define MAX_MATRIX_SIZE 90

void generateRandomMatrix(int N, int matrix[N][N]) {
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            matrix[i][j] = rand() % 10; // Generate random values between 0 and 9
        }
    }
}

void multiplyMatrices(int N, int A[N][N], int B[N][N], int C[N][N]) {
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            C[i][j] = 0;
            for (int k = 0; k < N; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

void writeMatrixToFile(int N, int matrix[N][N], const char *filename) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            fprintf(file, "%d ", matrix[i][j]);
        }
        fprintf(file, "\n");
    }
    fclose(file);
}

int main(int argc, char **argv) {
    srand(time(NULL)); // Seed the random number generator

    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int N = rand() % MAX_MATRIX_SIZE + 1; // Random matrix size between 1 and 90
    printf("Matrix Size: %d x %d\n", N, N);
    int matrixA[N][N], matrixB[N][N], matrixC[N][N];

    if (rank == 0) {
        // Generate random matrices A and B
        generateRandomMatrix(N, matrixA);
        generateRandomMatrix(N, matrixB);
    }

    // Broadcast matrices A and B to all processes
    MPI_Bcast(matrixA, N * N, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Bcast(matrixB, N * N, MPI_INT, 0, MPI_COMM_WORLD);

    struct timespec start_time, end_time;
    clock_gettime(CLOCK_MONOTONIC_RAW, &start_time);

    // Divide work among processes
    int chunk_size = N / size;
    int start_row = rank * chunk_size;
    int end_row = (rank == size - 1) ? N : (rank + 1) * chunk_size;

    // Multipl matrices A and B
    multiplyMatrices(N, matrixA, matrixB, matrixC);

    // Gather results from all processes to process 0
    MPI_Gather(matrixC + start_row, chunk_size * N, MPI_INT, matrixC, chunk_size * N, MPI_INT, 0, MPI_COMM_WORLD);

    clock_gettime(CLOCK_MONOTONIC_RAW, &end_time);
    double execution_time = (end_time.tv_sec - start_time.tv_sec) * 1e6 + (end_time.tv_nsec - start_time.tv_nsec) / 1e3;

    // Print execution time on process 0
    if (rank == 0) {
        printf("Execution time: %.6f microseconds\n", execution_time);
    }

    MPI_Finalize();
    return 0;
}
